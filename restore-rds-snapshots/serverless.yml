# Restores RDS snapshots
service: restore-rds-snapshots 

provider:
  name: aws
  runtime: python3.7
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  environment:
    DB_NAME: ${opt:db_name}
    DB_SECURITY_GROUP_ID: ${opt:db_security_group_id}
    LAMBDA_SECURITY_GROUP_ID: ${opt:lambda_security_group_id}
    DB_SUBNET_GROUP_NAME: ${opt:subnet_group_name}
    STAGE: ${opt:stage}
  role: LambdaIamRole

functions:
  main:
    handler: handler.restore
    events:
      - schedule: cron(0 22 * * ? *)
        enabled: false

resources:
  Resources:
    LambdaIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: restore-rds-snapshots-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: restore-rds-snapshots-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:  
                 - Effect: "Allow"
                   Action: 
                     - rds:RestoreDBInstanceToPointInTime
                     - rds:CreateEventSubscription
                     - rds:DescribeEventSubscriptions
                     - rds:DeleteEventSubscription
                   Resource: "*" 
                 - Effect: "Allow"
                   Action: 
                     - kms:DescribeKey
                     - kms:CreateGrant
                   Resource: "*" 

package:
  exclude:
    - node_modules/**
    - venv/**
    - package-lock.json
    - package.json

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true